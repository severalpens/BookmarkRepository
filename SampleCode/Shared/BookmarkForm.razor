@using Microsoft.AspNetCore.Components.Forms;

<h1>@Mode Bookmark</h1>
<hr />
@if (Bookmark is not null)
{
    <EditForm Model="@Bookmark"
              OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
              OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h2>🆔 Identification</h2>
        <p>
            <label>
                Name:
                <InputText @bind-Value="Bookmark.Name" />
                <ConcurrencyField Model="@Bookmark"
                                  DbModel="@DbBookmark"
                                  Property="obj => obj?.Name" />
            </label>
        </p>
        <p>
            <label>
                Url:
                <InputText @bind-Value="Bookmark.Url" />
                <ConcurrencyField Model="@Bookmark"
                                  DbModel="@DbBookmark"
                                  Property="obj => obj?.Url" />
            </label>
        </p>
        <br />
        <button disabled="@Busy" class="btn btn-warning"
                @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit"
                class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}
@code {
    /// <summary>
    /// Let parent handle result of validation.
    /// </summary>
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    /// <summary>
    /// Let parent handle what to do on cancel.
    /// </summary>
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    /// <summary>
    /// <c>True</c> if add mode.
    /// </summary>
    [Parameter]
    public bool IsAdd { get; set; }

    /// <summary>
    /// The <see cref="Bookmark"/> to upsert.
    /// </summary>
    [Parameter]
    public Bookmark? Bookmark { get; set; }

    /// <summary>
    /// The database version of <see cref="Bookmark"/> if a concurrency issue
    /// exists.
    /// </summary>
    [Parameter]
    public Bookmark? DbBookmark { get; set; }

    /// <summary>
    /// Prevent multiple asynchronous operations at the same time.
    /// </summary>
    [Parameter]
    public bool Busy { get; set; }

    /// <summary>
    /// Mode.
    /// </summary>
    private string Mode => IsAdd ? "Add" : "Edit";

    /// <summary>
    /// Ask to cancel.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    /// <summary>
    /// Handle form submission request.
    /// </summary>
    /// <param name="isValid"><c>True</c> when field validation passed.</param>
    /// <returns>A <see cref="Task"/>.</returns>
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid);
    }
}